/*
 * 파일명: 03_constructor_destructor_order.cpp
 * 
 * 주제: 생성자/소멸자 호출 순서 (Constructor/Destructor Call Order)
 * 정의: 상속 관계에서 생성자는 부모→자식, 소멸자는 자식→부모 순으로 호출
 * 
 * 핵심 개념:
 * - 생성자 호출 순서: 최상위 부모 클래스부터 자식 클래스 순으로 실행
 * - 소멸자 호출 순서: 생성의 정확한 역순으로 실행 (자식부터 부모로)
 * - 상속 체인: 여러 단계의 상속에서도 동일한 순서 원칙 적용
 * - 자동 호출: 개발자가 명시적으로 호출하지 않아도 컴파일러가 자동 처리
 * 
 * 생성자 호출 과정:
 * - 자식 객체 생성 시 부모 생성자부터 먼저 호출
 * - 부모 객체가 완전히 초기화된 후 자식 생성자 실행
 * - 여러 단계 상속에서는 가장 위쪽 조상부터 차례로 생성
 * - 각 생성자에서 해당 클래스의 멤버 변수와 초기화 작업 수행
 * 
 * 소멸자 호출 과정:
 * - 객체 스코프 종료 시 자식 소멸자부터 먼저 호출
 * - 자식의 정리 작업 완료 후 부모 소멸자 실행
 * - 생성의 정확한 역순으로 진행하여 의존성 문제 방지
 * - 각 소멸자에서 해당 클래스의 자원 해제 작업 수행
 * 
 * 사용 시기:
 * - 상속 관계에서 올바른 초기화 순서가 중요할 때
 * - 부모 클래스 자원에 의존하는 자식 클래스 설계 시
 * - 복잡한 상속 구조에서 객체 생명주기 이해가 필요할 때
 * - 디버깅 시 객체 생성/소멸 과정 추적할 때
 * 
 * 설계 고려사항:
 * - 부모 생성자가 먼저 실행되므로 부모 멤버를 안전하게 사용 가능
 * - 자식 소멸자가 먼저 실행되므로 부모 자원에 안전하게 접근 가능
 * - 생성자에서 가상 함수 호출 시 의도와 다른 결과 가능
 * - 예외 발생 시에도 이미 생성된 부모 객체는 안전하게 소멸됨
 * 
 * 장점:
 * - 자동적이고 예측 가능한 초기화 순서
 * - 메모리 누수나 자원 누수 방지
 * - 상속 관계의 의존성을 자연스럽게 해결
 * - 예외 안전성 자동 보장
 * 
 * 관련 개념:
 * - 초기화 리스트: 부모 생성자 명시적 호출
 * - 가상 상속: 다중 상속에서의 생성자 호출 순서
 * - RAII: 자원 관리를 생성자/소멸자와 연결
 * - 스택 되감기: 예외 발생 시 소멸자 자동 호출
 * 
 * 주의사항:
 * - 생성자에서 가상 함수 호출 시 부모 버전이 호출됨
 * - 소멸자에서도 가상 함수는 현재 클래스 버전만 호출됨
 * - 부모 생성자에서 예외 발생 시 자식 생성자는 호출되지 않음
 * - 소멸자에서는 예외를 던지면 안됨 (프로그램 종료 위험)
 */

#include <iostream>
using namespace std;

class Base {
public:
    Base() {
        cout << "Base 생성자" << endl;
    }

    ~Base() {
        cout << "Base 소멸자" << endl;
    }
};

class Derived : public Base {
public:
    Derived() {
        cout << "Derived 생성자" << endl;
    }

    ~Derived() {
        cout << "Derived 소멸자" << endl;
    }
};

class GrandChild : public Derived {
public:
    GrandChild() {
        cout << "GrandChild 생성자" << endl;
    }

    ~GrandChild() {
        cout << "GrandChild 소멸자" << endl;
    }
};

int main() {
    cout << "=== 객체 생성 ===" << endl;
    {
        GrandChild gc;
    } // 여기서 소멸
    cout << "=== 객체 소멸 완료 ===" << endl;

    return 0;
}